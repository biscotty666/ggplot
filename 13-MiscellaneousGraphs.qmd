---
title: "13 - Miscellaneous graphs"
format: gfm
---

```{r, setup, include=FALSE}
knitr::opts_chunk$set(paged.print = FALSE)
```

```{r message=FALSE}
library(tidyverse)
library(gcookbook)
library(patchwork)
```

[Source](https://r-graphics.org/)

# Miscellaneous graphs

## Correlation matrix

```{r message=FALSE}
library(corrplot)
mtcars |> head()
```

> in order to exclude NA from correlation, use `use="complete.obs"` or `use="pairwise.complete.obs`

```{r}
mcor <- cor(mtcars)
round(mcor, digits = 2)
```

```{r}
corrplot(mcor)
```

```{r}
corrplot(mcor, method = "shade", shade.col = NA,
         tl.col = "black", tl.srt = 45)
```

> with labels (and a lighter palette)

```{r}
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))

corrplot(mcor, method = "shade", shade.col = NA,
         tl.col = "black", tl.srt = 45,
         col = col(200), addCoef.col = "black", cl.pos = "n", order = "AOE")
```

```{r}
library(ggcorrplot)
ggcorrplot(mcor)
```

```{r}
ggcorrplot(mcor, method = "circle")
```

```{r}
ggcorrplot(mcor, lab = TRUE, lab_size = 3)
```

## Plotting functions

```{r}
p <- ggplot(data.frame(x = c(-3, 3)), aes(x = x))

p1 <- p + stat_function(fun = dnorm)

# t-distribution
p2 <- p + stat_function(fun = dt, args = list(df = 2))

p1 + p2
```

> Custom function. Default is to calculate 101 points along the x range

```{r}
myfun <- function(xvar) {
  1 / (1 + exp(-xvar + 10))
}

ggplot(data.frame(x = c(0, 20)), aes(x = x)) +
  stat_function(fun = myfun)
```

## Shading subregion under function curve

```{r}
dnorm_limit <- function(x) {
  y <- dnorm(x)
  y[x < 0 | x > 2] <- NA
  y
}

ggplot(data.frame(x = c(-3, 3)), aes(x = x)) +
  stat_function(fun = dnorm_limit, geom = "area",
                fill = "blue", alpha = 0.3) +
  stat_function(fun = dnorm)
```

> Range limit function: an example of a closure in R

```{r}
limitRange <- function(fun, min, max) {
  function(x) {
    y <- fun(x)
    y[x < min | x > max] <- NA
    y
  }
}
```

```{r}
dlimit <- limitRange(dnorm, 0, 2)
dlimit(-2:4)
```

```{r}
ggplot(data.frame(x = c(-3, 3)), aes(x = x)) +
  stat_function(fun = dnorm) +
  stat_function(fun = dlimit, geom = "area", 
                fill = "blue", alpha = 0.2)
```

## Network graph

> `make_graph()` from directed edges

```{r message=FALSE}
library(igraph)

gd <- make_graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6))
plot(gd)
```

> undirected

```{r}
gu <- make_graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
plot(gu, vertex.label = NA)
```

```{r}
gd
```

> Make repeatable

```{r}
set.seed(229)
plot(gu)
```

> Graph from data frame

```{r}
head(madmen2)
```

```{r}
g <- graph_from_data_frame(madmen2, directed = T)

# Remove margins
par(mar = c(0,0,0,0))
plot(g, layout = layout.fruchterman.reingold, vertex.size = 8,
     edge.arrow.size = 0.5, vertex.label = NA)
```

```{r}
g <- graph_from_data_frame(madmen, directed = FALSE)
par(mar = c(0,0,0,0))
plot(g, layout = layout.circle, vertex.size = 8,
     vertex.label = NA)
```

## Text labels with network graph

```{r}
m <- madmen[1:nrow(madmen) %% 2 == 1, ]

g <- graph_from_data_frame(m, directed=FALSE)

V(g)$name
```

```{r}
par(mar = c(0,0,0,0))
plot(g, layout = layout.fruchterman.reingold,
     vertex.size = 4, 
     vertex.label = V(g)$name,
     vertex.label.cex = 0.8,
     vertex.label.dist = 0.4, # label offset
     vertex.label.color = "black"
     )
```

> Alternatively, modify the plot object

```{r}
V(g)$size        <- 4
V(g)$label       <- V(g)$name
V(g)$label.cex   <- 0.8
V(g)$label.dist  <- 0.4
V(g)$label.color <- "black"

g$layout <- layout.fruchterman.reingold

par(mar = c(0,0,0,0))
plot(g)
```

> Setting edge properties

```{r}
E(g)
```

```{r}
E(g)$color <- "grey70"
E(g)[c(2,11,19)]$color <- "red"

par(mar = c(0,0,0,0))
plot(g)
```

## Heat map

> `geom_tile()` or `geom_raster()`

```{r}
class(presidents)
str(presidents)
```

```{r}
pres_rating <- data.frame(
  rating = as.numeric(presidents),
  year = as.numeric(floor(time(presidents))),
  quarter = as.numeric(cycle(presidents))
)

head(pres_rating)
```

```{r}
p <- ggplot(pres_rating, aes(x = year, y = quarter, fill = rating))

p1 <- p + geom_tile()
p2 <- p + geom_raster() # same appearance, more efficient

p1 / p2
```

> customize appearance

```{r}
p +
  geom_tile() +
  scale_x_continuous(breaks = seq(1940, 1976, by = 4), expand = c(0, 0)) +
  scale_y_reverse(expand = c(0, 0)) +
  scale_fill_gradient2(midpoint = 50, mid = "grey70", limits = c(0, 100))
```

## Three dimensional scatter plot

```{r message=FALSE}
library(rgl)
```

```{r eval=FALSE}
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
       type = "s", size = 0.75, lit = FALSE)
```

![](images/clipboard-2432922549.png)

```{r eval=FALSE}
# Function to interleave the elements of two vectors
interleave <- function(v1, v2)  as.vector(rbind(v1,v2))

plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
       xlab = "Weight", ylab = "Displacement", zlab = "MPG",
       size = .75, type = "s", lit = FALSE)


segments3d(interleave(mtcars$wt,   mtcars$wt),
           interleave(mtcars$disp, mtcars$disp),
           interleave(mtcars$mpg,  min(mtcars$mpg)),
           alpha = 0.4, col = "blue")
```

![](images/clipboard-2485056399.png)

```{r eval=FALSE}
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
       xlab = "", ylab = "", zlab = "",
       axes = FALSE,
       size = .75, type = "s", lit = FALSE)

segments3d(interleave(mtcars$wt,   mtcars$wt),
           interleave(mtcars$disp, mtcars$disp),
           interleave(mtcars$mpg,  min(mtcars$mpg)),
           alpha = 0.4, col = "blue")

# Draw the box.
rgl.bbox(color = "grey50",          # grey60 surface and black text
         emission = "grey50",       # emission color is grey50
         xlen = 0, ylen = 0, zlen = 0)  # Don't add tick marks

# Set default color of future objects to black
rgl.material(color = "black")

# Add axes to specific sides. Possible values are "x--", "x-+", "x+-", and "x++".
axes3d(edges = c("x--", "y+-", "z--"),
       ntick = 6,                       # Attempt 6 tick marks on each side
       cex = .75)                       # Smaller font

# Add axis labels. 'line' specifies how far to set the label from the axis.
mtext3d("Weight",       edge = "x--", line = 2)
mtext3d("Displacement", edge = "y+-", line = 3)
mtext3d("MPG",          edge = "z--", line = 3)
```

![](images/clipboard-2678258019.png)

## Adding a prediction surface to 3d plot

> utility functions

```{r}
predictgrid <- function(model, xvar, yvar, zvar, res = 16, type = NULL) {
  # Find the range of the predictor variable. This works for lm and glm
  # and some others, but may require customization for others.
  xrange <- range(model$model[[xvar]])
  yrange <- range(model$model[[yvar]])

  newdata <- expand.grid(x = seq(xrange[1], xrange[2], length.out = res),
                         y = seq(yrange[1], yrange[2], length.out = res))
  names(newdata) <- c(xvar, yvar)
  newdata[[zvar]] <- predict(model, newdata = newdata, type = type)
  newdata
}
```

> convert long-style data frame with x, y, z into a list with x and y as row/col values and z as a matrix

```{r}
df2mat <- function(p, xvar = NULL, yvar = NULL, zvar = NULL) {
  if (is.null(xvar)) xvar <- names(p)[1]
  if (is.null(yvar)) yvar <- names(p)[2]
  if (is.null(zvar)) zvar <- names(p)[3]
  
  x <- unique(p[[xvar]])
  y <- unique(p[[yvar]])
  z <- matrix(p[[zvar]], nrow = length(y), ncol = length(x))
  
  m <- list(x, y, z)
  names(m) <- c(xvar, yvar, zvar)
  m
}
```

```{r}
# Function to interleave the elements of two vectors
interleave <- function(v1, v2)  as.vector(rbind(v1,v2))
```

```{r eval=FALSE}
# Make a copy of the data set
m <- mtcars

# Generate a linear model
mod <- lm(mpg ~ wt + disp + wt:disp, data = m)

# Get predicted values of mpg from wt and disp
m$pred_mpg <- predict(mod)

# Get predicted mpg from a grid of wt and disp
mpgrid_df <- predictgrid(mod, "wt", "disp", "mpg")
mpgrid_list <- df2mat(mpgrid_df)

# Make the plot with the data points
plot3d(m$wt, m$disp, m$mpg, type = "s", size = 0.5, lit = FALSE)

# Add the corresponding predicted points (smaller)
spheres3d(m$wt, m$disp, m$pred_mpg, alpha = 0.4, type = "s", size = 0.5, lit = FALSE)

# Add line segments showing the error
segments3d(interleave(m$wt,   m$wt),
           interleave(m$disp, m$disp),
           interleave(m$mpg,  m$pred_mpg),
           alpha = 0.4, col = "red")

# Add the mesh of predicted values
surface3d(mpgrid_list$wt, mpgrid_list$disp, mpgrid_list$mpg,
          alpha = 0.4, front = "lines", back = "lines")
```

> Changing the appearance

```{r eval=FALSE}
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
       xlab = "", ylab = "", zlab = "",
       axes = FALSE,
       size = .5, type = "s", lit = FALSE)

# Add the corresponding predicted points (smaller)
spheres3d(m$wt, m$disp, m$pred_mpg, alpha = 0.4, type = "s", size = 0.5, lit = FALSE)

# Add line segments showing the error
segments3d(interleave(m$wt,   m$wt),
           interleave(m$disp, m$disp),
           interleave(m$mpg,  m$pred_mpg),
           alpha = 0.4, col = "red")

# Add the mesh of predicted values
surface3d(mpgrid_list$wt, mpgrid_list$disp, mpgrid_list$mpg,
          alpha = 0.4, front = "lines", back = "lines")

# Draw the box
bbox3d(color = "grey50",          # grey60 surface and black text
         emission = "grey50",       # emission color is grey50
         xlen = 0, ylen = 0, zlen = 0)  # Don't add tick marks

# Set default color of future objects to black
material3d(color = "black")

# Add axes to specific sides. Possible values are "x--", "x-+", "x+-", and "x++".
axes3d(edges = c("x--", "y+-", "z--"),
       ntick = 6,                       # Attempt 6 tick marks on each side
       cex = .75)                       # Smaller font

# Add axis labels. 'line' specifies how far to set the label from the axis.
mtext3d("Weight",       edge = "x--", line = 2)
mtext3d("Displacement", edge = "y+-", line = 3)
mtext3d("MPG",          edge = "z--", line = 3)
```

## Saving a 3d plot

```{r}
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg, type = "s", size = 0.75, lit = FALSE)

view <- par3d("userMatrix")

# restore
par3d(userMatrix = view)
rgl.snapshot('3dplot.png', fmt = 'png')
```

![](3dplot.png){width="513"}

```{r}
dput(view)
```

```{r}
view <- structure(c(0.573942482471466, 0.411120474338531, -0.70821613073349, 
0, -0.818895578384399, 0.288455933332443, -0.496188700199127, 
0, 0.000295788049697876, 0.864738762378693, 0.502221822738647, 
0, 0, 0, 0, 1), dim = c(4L, 4L))
```

## Animating 3d plot

```{r eval=FALSE}
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg, type = "s", size = 0.75, lit = FALSE)

play3d(spin3d())
```

```{r eval=FALSE}
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg, type = "s", size = 0.75, lit = FALSE)
play3d(spin3d(axis = c(1,0,0), rpm = 4), duration = 20)
```

```{r eval=FALSE}
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg, type = "s", size = 0.75, lit = FALSE)
movie3d(spin3d(axis = c(0,0,1), rpm = 4), duration = 15, fps = 50)
```

## Dendograms

> `hclust()`

```{r}
set.seed(392)

c2 <- countries |> 
  filter(Year == 2009) |> 
  drop_na() |> 
  sample_n(25)
head(c2)
```

> it is necessary to use row names

```{r}
rownames(c2) <- c2$Name
# drop all non-numeric colums
c2 <- c2[, 4:7]
head(c2)
```

> scale the data because of the order of magnitude difference between gdp and infmortality

```{r}
c3 <- scale(c2)
head(c3)
```

```{r}
hc <- hclust(dist(c3))

plot(hc)
```

> Aligned text

```{r}
plot(hc, hang = -1)
```

## Vector field

> `geom_segment()`

```{r}
str(isabel)
```

The height (`z`) ranges from 0.035 km to 18.035 km. For this example, we’ll just use the lowest slice of data.

```{r}
islice <- filter(isabel, z == min(z))

ggplot(islice, aes(x = x, y = y)) +
  geom_segment(aes(xend = x + vx/50, yend = y + vy/50),
               size = 0.25) # .25 mm thick
```

> Reduce resolution and supply arrows for flow direction

```{r}
every_n <- function(x, by = 2) {
  x <- sort(x)
  x[seq(1, length(x), by = by)]
}

keepx <- every_n(unique(isabel$x), by = 4)
keepy <- every_n(unique(isabel$y), by = 4)

islicesub <- filter(islice, x %in% keepx & y %in% keepy)
```

```{r}
library(grid)

ggplot(islicesub, aes(x = x, y = y)) +
  geom_segment(aes(xend = x+vx/50, yend = y + vy/50),
               arrow = arrow(length = unit(0.1, "cm")), size = 0.25)
```

> Map the speed to alpha

```{r}
islicesub$speedxy <- sqrt(islicesub$vx^2 + islicesub$vy^2)

ggplot(islicesub, aes(x = x, y = y)) +
    geom_segment(aes(xend = x+vx/50, yend = y+vy/50, alpha = speed),
                 arrow = arrow(length = unit(0.1,"cm")), size = 0.6)
```

> Map speed to color

```{r}
usa <- map_data("usa")

ggplot(islicesub, aes(x = x, y = y)) +
  geom_segment(aes(xend = x+vx/50, yend = y+vy/50, colour = speed),
                 arrow = arrow(length = unit(0.1,"cm")), size = 0.6) +
  scale_color_continuous(low = "grey80", high = "darkred") +
  geom_path(aes(x = long, y = lat, group = group), data = usa) +
  coord_cartesian(xlim = range(islicesub$x), ylim = range(islicesub$y))
```

> Make faceted graph of three dimensions

```{r}
keepx <- every_n(unique(isabel$x), by = 5)
keepy <- every_n(unique(isabel$y), by = 5)
keepz <- every_n(unique(isabel$z), by = 2)

isub <- filter(isabel, x %in% keepx & y %in% keepy & z %in% keepz)

ggplot(isub, aes(x = x, y = y)) +
  geom_segment(aes(xend = x+vx/50, yend = y+vy/50, colour = speed),
                 arrow = arrow(length = unit(0.1,"cm")), size = 0.5) +
  scale_colour_continuous(low = "grey80", high = "darkred") +
  facet_wrap( ~ z)
```

## QQ Plot

> Compare empirical to normal distribution

```{r}
p1 <- ggplot(heightweight, aes(sample = heightIn)) +
  geom_qq() +
  geom_qq_line()

p2 <- ggplot(heightweight, aes(sample = ageYear)) +
  geom_qq() +
  geom_qq_line()

p1 + p2
```

## Graph ECDF

> Empirical cumulative distribution function

```{r}
p1 <- ggplot(heightweight, aes(x = heightIn)) +
  stat_ecdf()

p2 <- ggplot(heightweight, aes(x = ageYear)) +
  stat_ecdf()

p1 + p2
```

## Mosaic plot

> UCBAdmission is a 3D contingency table

```{r}
UCBAdmissions
```

```{r}
ftable(UCBAdmissions)
```

```{r}
dimnames(UCBAdmissions)
```

```{r}
library(vcd)

mosaic( ~ Admit + Gender + Dept, data = UCBAdmissions)
```

> Different order and formatting

```{r}
mosaic( ~ Dept + Gender + Admit, data = UCBAdmissions,
        highlighting = "Admit", highlighting_fill = c("lightblue", "pink"),
        direction = c("v","h","v"))
```

```{r}
# Another possible set of splitting directions
mosaic( ~ Dept + Gender + Admit, data = UCBAdmissions,
       highlighting = "Admit", highlighting_fill = c("lightblue", "pink"),
       direction = c("v", "v", "h"))
```

## Pie chart

```{r message=FALSE}
library(MASS)

fold <- table(survey$Fold)
fold
```

```{r}
par(mar = c(1, 1, 1, 1))
pie(fold)
```

## Maps

```{r message=FALSE}
library(maps)

states_map <- map_data("state")

ggplot(states_map, aes(x = long, y = lat, group = group)) +
  geom_polygon(fill = "white", color = "black")
```

```{r}
ggplot(states_map, aes(x = long, y = lat, group = group)) +
  geom_path() +
  coord_map("mercator")
```

```{r}
world_map <- map_data("world")
str(world_map)
```

> Search for region name

```{r}
sort(unique(world_map$region)) |> head()
```

```{r}
east_asia <- map_data("world", 
                      region = c("Japan", "China", "North Korea", "South Korea"))

ggplot(east_asia, aes(x = long, y = lat, group = group, fill = region)) +
  geom_polygon(colour = "black") +
  scale_fill_brewer(palette = "Set2")
```

> Some regions have higher resolution data sets like New Zealand

```{r}
nz1 <- map_data("world", region = "New Zealand") |> 
  filter(long > 0 & lat > -48)   

p1 <- ggplot(nz1, aes(x = long, y = lat, group = group)) +
  geom_path()

nz2 <- map_data("nz")
p2 <- ggplot(nz2, aes(x = long, y = lat, group = group)) +
  geom_path()

p1 + p2
```

## Choropleth map

```{r}
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
head(crimes)
```

```{r}
states_map <- map_data("state")

crime_map <- merge(states_map, crimes,
                   by.x = "region", by.y = "state")
head(crime_map)
```

```{r}
crime_map <- arrange(crime_map, group, order)
head(crime_map)
```

```{r}
ggplot(crime_map, aes(x = long, y = lat, group = group, fill = Assault)) +
  geom_polygon(color = "black") +
  coord_map("polyconic")
```

> with `geom_map()`

```{r}
ggplot(crimes, aes(map_id = state, fill = Assault)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  coord_map("polyconic")
```

> For color scale diverging from white middle

```{r}
crime_p <- ggplot(crimes, aes(map_id = state, fill = Assault)) +
  geom_map(map = states_map, colour = "black") +
  expand_limits(x = states_map$long, y = states_map$lat) +
  coord_map("polyconic")

crime_p +
  scale_fill_gradient2(low = "#559999", mid = "grey90", high = "#BB650B",
                       midpoint = median(crimes$Assault))
```

```{r}
crime_p +
    scale_fill_viridis_c()
```

> Use discrete values instead

```{r}
qa <- quantile(crimes$Assault, c(0, 0.2, 0.4, 0.6, 0.8, 1.0))
qa
```

```{r}
crimes$Assault_q <- cut(crimes$Assault, qa,
                        labels = c("0-20%", "20-40%", "40-60%", "60-80%", "80-100%"),
                        include.lowest = TRUE)
head(crimes)
```

```{r}
pal <- colorRampPalette(c("#559999", "grey80", "#bb650b"))(5)
pal
```

```{r}
ggplot(crimes, aes(map_id = state, fill = Assault_q)) +
  geom_map(map = states_map, colour = "black") +
  scale_fill_manual(values = pal) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  coord_map("polyconic") +
  labs(fill = "Assault Rate\nPercentile")
```

## Map with clean background

```{r}
ggplot(crimes, aes(map_id = state, fill = Assault_q)) +
  geom_map(map = states_map, colour = "black") +
  scale_fill_manual(values = pal) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  coord_map("polyconic") +
  labs(fill = "Assault Rate\nPercentile") +
  theme_void()
```

## Map from shapefile

```{r message=FALSE}
library(sf)

taiwan_shp <- st_read("fig/TWN_adm/TWN_adm2.shp")
```

```{r}
ggplot(taiwan_shp) +
  geom_sf()
```

```{r}
# Remove rows for which ENGTYPE_2 is NA; otherwise NA will show in the legend
taiwan_shp_mod <- taiwan_shp
taiwan_shp_mod <- taiwan_shp[!is.na(taiwan_shp$ENGTYPE_2), ]

ggplot(taiwan_shp_mod) +
  geom_sf(aes(fill = ENGTYPE_2))
```
