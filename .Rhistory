knitr::opts_chunk$set(paged.print = FALSE)
library(tidyverse)
library(gcookbook)
library(patchwork)
library(corrplot)
mtcars |> head()
mcor <- cor(mtcars)
round(mcor, digits = 2)
corrplot(mcor)
corrplot(mcor, method = "shade", shade.col = NA,
tl.col = "black", tl.srt = 45)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(mcor, method = "shade", shade.col = NA,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", cl.pos = "n", order = "AOE")
library(ggcorrplot)
ggcorrplot(mcor)
ggcorrplot(mcor, method = "circle")
ggcorrplot(mcor, lab = TRUE, lab_size = 3)
p <- ggplot(data.frame(x = c(-3, 3)), aes(x = x))
p1 <- p + stat_function(fun = dnorm)
# t-distribution
p2 <- p + stat_function(fun = dt, args = list(df = 2))
p1 + p2
myfun <- function(xvar) {
1 / (1 + exp(-xvar + 10))
}
ggplot(data.frame(x = c(0, 20)), aes(x = x)) +
stat_function(fun = myfun)
dnorm_limit <- function(x) {
y <- dnorm(x)
y[x < 0 | x > 2] <- NA
y
}
ggplot(data.frame(x = c(-3, 3)), aes(x = x)) +
stat_function(fun = dnorm_limit, geom = "area",
fill = "blue", alpha = 0.3) +
stat_function(fun = dnorm)
limitRange <- function(fun, min, max) {
function(x) {
y <- fun(x)
y[x < min | x > max] <- NA
y
}
dlimit <- limitRange(dnorm, 0, 2)
dlimit(-2:4)
ggplot(data.frame(x = c(-3, 3)), aes(x = x)) +
stat_function(fun = dnorm) +
stat_function(fun = dlimit, geom = "area",
fill = "blue", alpha = 0.2)
library(igraph)
gd <- make_graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6))
plot(gd)
gu <- make_graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
plot(gu, vertex.label = NA)
gd
set.seed(229)
plot(gu)
head(madmen2)
g <- graph_from_data_frame(madmen2, directed = T)
# Remove margins
par(mar = c(0,0,0,0))
plot(g, layout = layout.fruchterman.reingold, vertex.size = 8,
edge.arrow.size = 0.5, vertex.label = NA)
g <- graph_from_data_frame(madmen, directed = FALSE)
par(mar = c(0,0,0,0))
plot(g, layout = layout.circle, vertex.size = 8,
vertex.label = NA)
m <- madmen[1:nrow(madmen) %% 2 == 1, ]
g <- graph_from_data_frame(m, directed=FALSE)
V(g)$name
par(mar = c(0,0,0,0))
plot(g, layout = layout.fruchterman.reingold,
vertex.size = 4,
vertex.label = V(g)$name,
vertex.label.cex = 0.8,
vertex.label.dist = 0.4, # label offset
vertex.label.color = "black"
)
V(g)$size        <- 4
V(g)$label       <- V(g)$name
V(g)$label.cex   <- 0.8
V(g)$label.dist  <- 0.4
V(g)$label.color <- "black"
g$layout <- layout.fruchterman.reingold
par(mar = c(0,0,0,0))
plot(g)
E(g)
E(g)$color <- "grey70"
E(g)[c(2,11,19)]$color <- "red"
par(mar = c(0,0,0,0))
plot(g)
class(presidents)
str(presidents)
pres_rating <- data.frame(
rating = as.numeric(presidents),
year = as.numeric(floor(time(presidents))),
quarter = as.numeric(cycle(presidents))
)
head(pres_rating)
p <- ggplot(pres_rating, aes(x = year, y = quarter, fill = rating))
p1 <- p + geom_tile()
p2 <- p + geom_raster() # same appearance, more efficient
p1 / p2
p +
geom_tile() +
scale_x_continuous(breaks = seq(1940, 1976, by = 4), expand = c(0, 0)) +
scale_y_reverse(expand = c(0, 0)) +
scale_fill_gradient2(midpoint = 50, mid = "grey70", limits = c(0, 100))
library(rgl)
predictgrid <- function(model, xvar, yvar, zvar, res = 16, type = NULL) {
# Find the range of the predictor variable. This works for lm and glm
# and some others, but may require customization for others.
xrange <- range(model$model[[xvar]])
yrange <- range(model$model[[yvar]])
newdata <- expand.grid(x = seq(xrange[1], xrange[2], length.out = res),
y = seq(yrange[1], yrange[2], length.out = res))
names(newdata) <- c(xvar, yvar)
newdata[[zvar]] <- predict(model, newdata = newdata, type = type)
newdata
}
df2mat <- function(p, xvar = NULL, yvar = NULL, zvar = NULL) {
if (is.null(xvar)) xvar <- names(p)[1]
if (is.null(yvar)) yvar <- names(p)[2]
if (is.null(zvar)) zvar <- names(p)[3]
x <- unique(p[[xvar]])
y <- unique(p[[yvar]])
z <- matrix(p[[zvar]], nrow = length(y), ncol = length(x))
m <- list(x, y, z)
names(m) <- c(xvar, yvar, zvar)
m
}
# Function to interleave the elements of two vectors
interleave <- function(v1, v2)  as.vector(rbind(v1,v2))
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg, type = "s", size = 0.75, lit = FALSE)
view <- par3d("userMatrix")
# restore
par3d(userMatrix = view)
rgl.snapshot('3dplot.png', fmt = 'png')
dput(view)
view <- structure(c(0.573942482471466, 0.411120474338531, -0.70821613073349,
0, -0.818895578384399, 0.288455933332443, -0.496188700199127,
0, 0.000295788049697876, 0.864738762378693, 0.502221822738647,
0, 0, 0, 0, 1), dim = c(4L, 4L))
set.seed(392)
c2 <- countries |>
filter(Year == 2009) |>
drop_na() |>
sample_n(25)
head(c2)
rownames(c2) <- c2$Name
# drop all non-numeric colums
c2 <- c2[, 4:7]
head(c2)
c3 <- scale(c2)
head(c3)
hc <- hclust(dist(c3))
plot(hc)
plot(hc, hang = -1)
str(isabel)
islice <- filter(isabel, z == min(z))
ggplot(islice, aes(x = x, y = y)) +
geom_segment(aes(xend = x + vx/50, yend = y + vy/50),
size = 0.25) # .25 mm thick
every_n <- function(x, by = 2) {
x <- sort(x)
x[seq(1, length(x), by = by)]
}
keepx <- every_n(unique(isabel$x), by = 4)
keepy <- every_n(unique(isabel$y), by = 4)
islicesub <- filter(islice, x %in% keepx & y %in% keepy)
library(grid)
ggplot(islicesub, aes(x = x, y = y)) +
geom_segment(aes(xend = x+vx/50, yend = y + vy/50),
arrow = arrow(length = unit(0.1, "cm")), size = 0.25)
islicesub$speedxy <- sqrt(islicesub$vx^2 + islicesub$vy^2)
ggplot(islicesub, aes(x = x, y = y)) +
geom_segment(aes(xend = x+vx/50, yend = y+vy/50, alpha = speed),
arrow = arrow(length = unit(0.1,"cm")), size = 0.6)
usa <- map_data("usa")
ggplot(islicesub, aes(x = x, y = y)) +
geom_segment(aes(xend = x+vx/50, yend = y+vy/50, colour = speed),
arrow = arrow(length = unit(0.1,"cm")), size = 0.6) +
scale_color_continuous(low = "grey80", high = "darkred") +
geom_path(aes(x = long, y = lat, group = group), data = usa) +
coord_cartesian(xlim = range(islicesub$x), ylim = range(islicesub$y))
keepx <- every_n(unique(isabel$x), by = 5)
keepy <- every_n(unique(isabel$y), by = 5)
keepz <- every_n(unique(isabel$z), by = 2)
isub <- filter(isabel, x %in% keepx & y %in% keepy & z %in% keepz)
ggplot(isub, aes(x = x, y = y)) +
geom_segment(aes(xend = x+vx/50, yend = y+vy/50, colour = speed),
arrow = arrow(length = unit(0.1,"cm")), size = 0.5) +
scale_colour_continuous(low = "grey80", high = "darkred") +
facet_wrap( ~ z)
p1 <- ggplot(heightweight, aes(sample = heightIn)) +
geom_qq() +
geom_qq_line()
p2 <- ggplot(heightweight, aes(sample = ageYear)) +
geom_qq() +
geom_qq_line()
p1 + p2
p1 <- ggplot(heightweight, aes(x = heightIn)) +
stat_ecdf()
p2 <- ggplot(heightweight, aes(x = ageYear)) +
stat_ecdf()
p1 + p2
UCBAdmissions
ftable(UCBAdmissions)
dimnames(UCBAdmissions)
UCBAdmissions
library(vcd)
mosaic( ~ Admit + Gender + Dept, data = UCBAdmissions)
mosaic( ~ Dept + Gender + Admit, data = UCBAdmissions,
highlighting = "Admit", highlighting_fill = c("lightblue", "pink"),
direction = c("v","h","v"))
# Another possible set of splitting directions
mosaic( ~ Dept + Gender + Admit, data = UCBAdmissions,
highlighting = "Admit", highlighting_fill = c("lightblue", "pink"),
direction = c("v", "v", "h"))
library(MASS)
fold <- table(survey$Fold)
fold
class(fold)
par(mar = c(1, 1, 1, 1))
pie(fold)
library(maps)
states_map <- map_data("state")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_path() +
coord_map("mercator")
